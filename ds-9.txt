Assignment 9: Write a program to implementing a simple neural network using 
TensorFlow/Keras. 
import pandas as pd 
import numpy as np 
import tensorflow as tf 
import tensorflow as tf 
from tensorflow.keras.models import Sequential 
from tensorflow.keras.layers import Dense, Input 
import matplotlib.pyplot as plt 
df = pd.read_csv('diabetes.csv') 
df.head() 
print ('Number of Rows :', df.shape[0]) 
print ('Number of Columns :', df.shape[1]) 
print ('Number of Patients with outcome 1 :', df.Outcome.sum()) 
print ('Event Rate :', round(df.Outcome.mean()*100,2) ,'%') 
df.describe() 
from sklearn.model_selection import train_test_split 
X = df.to_numpy()[:,0:8]  
Y = df.to_numpy()[:,8] 
seed = 42 
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.25, random_state = seed) 
print (f'Shape of Train Data : {X_train.shape}') 
print (f'Shape of Test Data : {X_test.shape}') 
model = Sequential([ 
Input(shape=(8,)),  # Define the input shape using the new `shape` argument 
Dense(24, activation='relu'), 
Dense(12, activation='relu'), 
Dense(1, activation='sigmoid'), 
]) 
# Compile the model (optional, but necessary for training) 
model.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy']) 
# Summary of the model 
#model.summary() 
model.summary() 
history = model.fit(X_train, y_train, epochs=150, batch_size=32, verbose = 1) 
# Plotting loss 
plt.plot(history.history['loss']) 
plt.title('Binary Cross Entropy Loss on Train dataset') 
plt.ylabel('loss') 
plt.xlabel('epoch') 
plt.show() 
# Plotting accuracy metric 
plt.plot(history.history['accuracy']) 
plt.title('Accuracy on the train dataset') 
plt.ylabel('accuracy') 
plt.xlabel('epoch') 
plt.show() 