Assignment 7: Write a program to implementing Boosting using AdaBoost 
# Import necessary libraries 
import pandas as pd 
from sklearn.model_selection import train_test_split 
from sklearn.ensemble import AdaBoostClassifier 
from sklearn.tree import DecisionTreeClassifier 
from sklearn.metrics import accuracy_score 
from sklearn.preprocessing import LabelEncoder 
# Load CSV file (replace 'your_dataset.csv' with your actual dataset file path) 
df = pd.read_csv('log.csv') 
# Check the first few rows of the dataset 
print(df.head()) 
# Step 1: Handle missing values (if any) 
# Example: Drop rows with missing values (you can also fill with the mean or median) 
df = df.dropna() 
# Step 2: Separate features (X) and target (y) 
# Assuming the last column is the target variable 
X = df.iloc[:, :-1].values  # All rows, all columns except the last one (features) 
y = df.iloc[:, -1].values   # Last column is the target 
# Step 3: Encode the target variable if it's categorical 
label_encoder = LabelEncoder() 
y = label_encoder.fit_transform(y) 
# Step 4: Split the data into training and testing sets 
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) 
# Step 5: Initialize and train the AdaBoost classifier with a DecisionTree as the base estimator 
# DecisionTreeClassifier with max_depth=1 is used to create a weak learner (stump) 
base_estimator = DecisionTreeClassifier(max_depth=1) 
# Update: Use 'estimator' instead of 'base_estimator' 
adaboost_classifier = AdaBoostClassifier(estimator=base_estimator, n_estimators=50, 
random_state=42) 
adaboost_classifier.fit(X_train, y_train) 
# Step 6: Make predictions on the test set 
y_pred = adaboost_classifier.predict(X_test) 
# Step 7: Evaluate the model's performance 
accuracy = accuracy_score(y_test, y_pred) 
print(f'Accuracy of AdaBoost on test data: {accuracy * 100:.2f}%')